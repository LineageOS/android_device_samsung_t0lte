type qmuxd, domain;
type qmuxd_exec, exec_type, file_type;

net_domain(qmuxd)
init_daemon_domain(qmuxd)
domain_trans(init, rootfs, qmuxd)

qmux_socket(qmuxd);

#Allow logging
allow qmuxd diag_device:chr_file { rw_file_perms };

#Allow operation in platform specific transports
allow qmuxd smd_device:chr_file { rw_file_perms };
allow qmuxd hsic_device:chr_file { rw_file_perms };

#Allow qmuxd to operate in platform specific transports
allow qmuxd sysfs_smd_open_timeout:file w_file_perms;
allow qmuxd sysfs_wake_lock:file { append open };

#Allow qmuxd to write in hsic specific transport
allow qmuxd sysfs:file w_file_perms;
allow qmuxd radio_device:file w_file_perms;

allow qmuxd self:capability { setuid setgid setpcap dac_override };

#Allow qmuxd to have the CAP_BLOCK_SUSPEND capability
allow qmuxd qmuxd:capability2 { block_suspend };

allow qmuxd sysfs_esoc:dir r_dir_perms;
allow qmuxd sysfs_hsic_modem_wait:file w_file_perms;
allow qmuxd sysfs_esoc:lnk_file read;

r_dir_file(qmuxd, sysfs_ssr);
allow qmuxd mhi_device:chr_file rw_file_perms;

allow qmuxd qmuxd:process { execmem };
allow qmuxd radio_device:chr_file { read write open };
allow qmuxd log_device:chr_file { open write };


allow qmuxd radio_device:chr_file { read write open };
allow qmuxd radio_device:dir search;
allow qmuxd radio_device:file { write open };

allow qmuxd socket_device:dir { write remove_name add_name };
allow qmuxd socket_device:sock_file { create unlink getattr setattr };
allow qmuxd self:capability { setuid setpcap };
allow qmuxd sysfs_wake_lock:file { open append };
